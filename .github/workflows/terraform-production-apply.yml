name: "Terraform Apply (Production)"

on:
  workflow_dispatch:
  push:
    paths:
      - "packages/terraform/apps/**/*"
      - "packages/terraform/auth/**/*"
      - "packages/terraform/main/prod/**/*"
      - "packages/lambda/**/*"
    branches:
      - master

jobs:
  terraform-apply:
    name: "Terraform Apply (Production)"
    runs-on: ubuntu-latest
    env:
      cwd: ./packages/terraform/main/prod
      lambda_cwd: ./packages/lambda
      post_apply_scripts_cwd: ./packages/terraform
    steps:
      - name: "Setup - Checkout"
        uses: actions/checkout@v2.3.4

      - name: "Setup - Build AWS Credentials"
        run: |
          mkdir -p ~/.aws
          echo "[${{ secrets.PROD_TF_VAR_AWS_PROFILE }}]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.PROD_TF_VAR_AWS_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.PROD_TF_VAR_AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

      - name: "Setup - Node"
        uses: actions/setup-node@v2
        with:
          node-version: '12'

      - name: "Setup - Terraform CLI"
        uses: hashicorp/setup-terraform@v1.3.2

      - name: "Run - Setup for Post Apply Scripts"
        working-directory: ${{ env.post_apply_scripts_cwd }}
        run: npm install

      - name: "Run - Build Lambda Functions"
        working-directory: ${{ env.lambda_cwd }}
        run: |
          npm install
          npm run build

      - name: "Run - Terraform Init"
        working-directory: ${{ env.cwd }}
        run: terraform init -input=false

      - name: "Run - Terraform Apply"
        working-directory: ${{ env.cwd }}
        id: plan
        run: terraform apply -input=false -auto-approve
        env:
          TF_VAR_database_url: ${{ secrets.PROD_TF_VAR_DATABASE_URL }}
          TF_VAR_aws_access_key: ${{ secrets.PROD_TF_VAR_AWS_ACCESS_KEY }}
          TF_VAR_aws_secret_access_key: ${{ secrets.PROD_TF_VAR_AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_user_pool_id: ${{ secrets.PROD_TF_VAR_AWS_USER_POOL_ID }}
          TF_VAR_aws_user_pool_client_id: ${{ secrets.PROD_TF_VAR_AWS_USER_POOL_CLIENT_ID }}
          TF_VAR_aws_region: ${{ secrets.PROD_TF_VAR_AWS_REGION }}
          TF_VAR_aws_profile: ${{ secrets.PROD_TF_VAR_AWS_PROFILE }}
          TF_VAR_user_pool_name: ${{ secrets.PROD_TF_VAR_USER_POOL_NAME }}
          TF_VAR_client_name: ${{ secrets.PROD_TF_VAR_CLIENT_NAME }}
          TF_VAR_facebook_client_id: ${{ secrets.PROD_TF_VAR_FACEBOOK_CLIENT_ID }}
          TF_VAR_facebook_client_secret: ${{ secrets.PROD_TF_VAR_FACEBOOK_CLIENT_SECRET }}
          TF_VAR_google_client_id: ${{ secrets.PROD_TF_VAR_GOOGLE_CLIENT_ID }}
          TF_VAR_google_client_secret: ${{ secrets.PROD_TF_VAR_GOOGLE_CLIENT_SECRET }}
          TF_VAR_sign_in_callback_url: ${{ secrets.PROD_TF_VAR_SIGN_IN_CALLBACK_URL }}
          TF_VAR_sign_out_callback_url: ${{ secrets.PROD_TF_VAR_SIGN_OUT_CALLBACK_URL }}
          TF_VAR_user_pool_domain: ${{ secrets.PROD_TF_VAR_USER_POOL_DOMAIN }}
          TF_VAR_do_token: ${{ secrets.PROD_TF_VAR_DO_TOKEN }}
          TF_VAR_web_git_repo: ${{ secrets.PROD_TF_VAR_WEB_GIT_REPO }}
          TF_VAR_web_git_branch: ${{ secrets.PROD_TF_VAR_WEB_GIT_BRANCH }}
          TF_VAR_web_source_dir: ${{ secrets.PROD_TF_VAR_WEB_SOURCE_DIR }}
          TF_VAR_web_instance_size: ${{ secrets.PROD_TF_VAR_WEB_INSTANCE_SIZE }}
          TF_VAR_web_port: ${{ secrets.PROD_TF_VAR_WEB_PORT }}
          TF_VAR_web_application_name: ${{ secrets.PROD_TF_VAR_WEB_APPLICATION_NAME }}
          TF_VAR_api_git_repo: ${{ secrets.PROD_TF_VAR_API_GIT_REPO }}
          TF_VAR_api_git_branch: ${{ secrets.PROD_TF_VAR_API_GIT_BRANCH }}
          TF_VAR_api_source_dir: ${{ secrets.PROD_TF_VAR_API_SOURCE_DIR }}
          TF_VAR_api_instance_size: ${{ secrets.PROD_TF_VAR_API_INSTANCE_SIZE }}
          TF_VAR_api_port: ${{ secrets.PROD_TF_VAR_API_PORT }}
          TF_VAR_api_application_name: ${{ secrets.PROD_TF_VAR_API_APPLICATION_NAME }}
          TF_VAR_public_graphql_endpoint: ${{ secrets.PROD_TF_VAR_PUBLIC_GRAPHQL_ENDPOINT }}
          TF_VAR_media_temp_folder: ${{ secrets.PROD_TF_VAR_MEDIA_TEMP_FOLDER }}
          TF_VAR_cloudinary_key: ${{ secrets.PROD_TF_VAR_CLOUDINARY_KEY }}
          TF_VAR_cloudinary_secret_key: ${{ secrets.PROD_TF_VAR_CLOUDINARY_SECRET_KEY }}
          TF_VAR_cloudinary_cloud_name: ${{ secrets.PROD_TF_VAR_CLOUDINARY_CLOUD_NAME }}
          TF_VAR_auth_cookie_path: ${{ secrets.PROD_TF_VAR_AUTH_COOKIE_PATH}}
          TF_VAR_auth_cookie_domain: ${{ secrets.PROD_TF_VAR_AUTH_COOKIE_DOMAIN }}
          TF_VAR_auth_cookie_expiry_days: ${{ secrets.PROD_TF_VAR_AUTH_COOKIE_EXPIRY_DAYS }}
          TF_VAR_auth_cookie_secure: ${{ secrets.PROD_TF_VAR_AUTH_COOKIE_SECURE }}
          # Vars for storing value that get encrypted by digitalocean
          TF_VAR_cloudinary_secret_key_do_encrypted: ${{ secrets.PROD_TF_VAR_CLOUDINARY_SECRET_KEY_DO_ENCRYPTED }}
          TF_VAR_database_url_do_encrypted: ${{ secrets.PROD_TF_VAR_DATABASE_URL_DO_ENCRYPTED }}
          TF_VAR_aws_secret_access_key_do_encrypted: ${{ secrets.PROD_TF_VAR_AWS_SECRET_ACCESS_KEY_DO_ENCRYPTED }}

      - name: "RUN - Reflect Digital Ocean Encrypted Secrets Back to Github"
        working-directory: ${{ env.post_apply_scripts_cwd }}
        run: ./node_modules/.bin/ts-node scripts/token-reflector.ts
        env:
          TF_VAR_github_personal_access_token: ${{ secrets.PROD_TF_VAR_GITHUB_PERSONAL_ACCESS_TOKEN }}
          TF_VAR_api_application_name: ${{ secrets.PROD_TF_VAR_API_APPLICATION_NAME }}
          TF_VAR_api_git_repo: ${{ secrets.PROD_TF_VAR_API_GIT_REPO }}
          TF_VAR_do_token: ${{ secrets.PROD_TF_VAR_DO_TOKEN }}
          SECRETS_PREFIX: "PROD_"
          SECRETS_POSTFIX: "_DO_ENCRYPTED"
